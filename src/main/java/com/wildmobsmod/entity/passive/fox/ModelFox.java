// Date: 16.12.2016 17.32.42
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.wildmobsmod.entity.passive.fox;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelFox extends ModelBase
{
	// fields
	ModelRenderer body;
	ModelRenderer mane;
	ModelRenderer leg1;
	ModelRenderer leg2;
	ModelRenderer leg3;
	ModelRenderer leg4;
	ModelRenderer head;
	ModelRenderer nose;
	ModelRenderer ear1;
	ModelRenderer ear2;
	ModelRenderer desertear1;
	ModelRenderer desertear2;
	ModelRenderer tail;

	protected static void convertToChild(ModelRenderer parent, ModelRenderer child)
	{
		// move child rotation point to be relative to parent
		child.rotationPointX -= parent.rotationPointX;
		child.rotationPointY -= parent.rotationPointY;
		child.rotationPointZ -= parent.rotationPointZ;
		// make rotations relative to parent
		child.rotateAngleX -= parent.rotateAngleX;
		child.rotateAngleY -= parent.rotateAngleY;
		child.rotateAngleZ -= parent.rotateAngleZ;
		// create relationship
		parent.addChild(child);
	}

	public ModelFox()
	{
		textureWidth = 64;
		textureHeight = 32;

		body = new ModelRenderer(this, 23, 14);
		body.addBox(-3F, -3F, 0F, 6, 6, 8);
		body.setRotationPoint(0F, 14F, -1F);
		body.setTextureSize(64, 32);
		body.mirror = true;
		setRotation(body, 0F, 0F, 0F);
		mane = new ModelRenderer(this, 23, 0);
		mane.addBox(-4F, -3F, 0F, 8, 7, 6);
		mane.setRotationPoint(0F, 13F, -7F);
		mane.setTextureSize(64, 32);
		mane.mirror = true;
		setRotation(mane, 0F, 0F, 0F);
		leg1 = new ModelRenderer(this, 0, 18);
		leg1.addBox(-1F, -1F, -1F, 2, 8, 2);
		leg1.setRotationPoint(-1.5F, 17F, 5F);
		leg1.setTextureSize(64, 32);
		leg1.mirror = true;
		setRotation(leg1, 0F, 0F, 0F);
		leg2 = new ModelRenderer(this, 0, 18);
		leg2.addBox(-1F, -1F, -1F, 2, 8, 2);
		leg2.setRotationPoint(1.5F, 17F, 5F);
		leg2.setTextureSize(64, 32);
		leg2.mirror = true;
		setRotation(leg2, 0F, 0F, 0F);
		leg3 = new ModelRenderer(this, 0, 18);
		leg3.addBox(-1F, -1F, -1F, 2, 8, 2);
		leg3.setRotationPoint(-1.5F, 17F, -5F);
		leg3.setTextureSize(64, 32);
		leg3.mirror = true;
		setRotation(leg3, 0F, 0F, 0F);
		leg4 = new ModelRenderer(this, 0, 18);
		leg4.addBox(-1F, -1F, -1F, 2, 8, 2);
		leg4.setRotationPoint(1.5F, 17F, -5F);
		leg4.setTextureSize(64, 32);
		leg4.mirror = true;
		setRotation(leg4, 0F, 0F, 0F);
		head = new ModelRenderer(this, 0, 0);
		head.addBox(-3F, -3F, -3F, 6, 6, 4);
		head.setRotationPoint(0F, 13.5F, -7F);
		head.setTextureSize(64, 32);
		head.mirror = true;
		setRotation(head, 0F, 0F, 0F);
		nose = new ModelRenderer(this, 0, 10);
		nose.addBox(-1.5F, -1F, -3F, 3, 3, 3);
		nose.setRotationPoint(0F, 14.5F, -10F);
		nose.setTextureSize(64, 32);
		nose.mirror = true;
		setRotation(nose, 0F, 0F, 0F);
		convertToChild(head, nose);
		ear1 = new ModelRenderer(this, 15, 11);
		ear1.addBox(-1F, -2F, 0F, 2, 2, 1);
		ear1.setRotationPoint(-2F, 10.5F, -8F);
		ear1.setTextureSize(64, 32);
		ear1.mirror = true;
		setRotation(ear1, 0F, 0F, 0F);
		convertToChild(head, ear1);
		ear2 = new ModelRenderer(this, 15, 11);
		ear2.addBox(-1F, -2F, 0F, 2, 2, 1);
		ear2.setRotationPoint(2F, 10.5F, -8F);
		ear2.setTextureSize(64, 32);
		ear2.mirror = true;
		setRotation(ear2, 0F, 0F, 0F);
		convertToChild(head, ear2);
		desertear1 = new ModelRenderer(this, 44, 14);
		desertear1.addBox(-2F, -6F, -0.5F, 4, 6, 1);
		desertear1.setRotationPoint(-2F, 12F, -8F);
		desertear1.setTextureSize(64, 32);
		setRotation(desertear1, 0F, 0.2617994F, -0.4617994F);
		convertToChild(head, desertear1);
		desertear2 = new ModelRenderer(this, 44, 14);
		desertear2.addBox(-2F, -6F, -0.5F, 4, 6, 1);
		desertear2.setRotationPoint(2F, 12F, -8F);
		desertear2.setTextureSize(64, 32);
		setRotation(desertear2, 0F, -0.2617994F, 0.4617994F);
		convertToChild(head, desertear2);
		tail = new ModelRenderer(this, 0, 19);
		tail.addBox(-1.5F, -1.5F, 0F, 3, 3, 10);
		tail.setRotationPoint(0F, 13F, 6F);
		tail.setTextureSize(64, 32);
		tail.mirror = true;
		setRotation(tail, -0.6363323F, 0F, 0F);
	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		EntityFox entityfox = (EntityFox) entity;
		int i = entityfox.getSkin();
		boolean flag = i == 2;
		if(!flag)
		{
			if(this.isChild)
			{
				float f6 = 2.0F;
				GL11.glPushMatrix();
				GL11.glScalef(1.7F / f6, 1.7F / f6, 1.7F / f6);
				GL11.glTranslatef(0.0F, 9.5F * f5, 3.0F * f5);
				head.render(f5);
				GL11.glPopMatrix();
				GL11.glPushMatrix();
				GL11.glScalef(0.8F / f6, 0.8F / f6, 0.8F / f6);
				GL11.glTranslatef(0.0F, 36.0F * f5, 0.0F);
				body.render(f5);
				mane.render(f5);
				leg1.render(f5);
				leg2.render(f5);
				leg3.render(f5);
				leg4.render(f5);
				tail.render(f5);
				GL11.glPopMatrix();
			}
			else
			{
				float f6 = 2.0F;
				GL11.glPushMatrix();
				GL11.glScalef(1.7F / f6, 1.7F / f6, 1.7F / f6);
				GL11.glTranslatef(0.0F, 4.0F * f5, 0.0F);
				body.render(f5);
				mane.render(f5);
				leg1.render(f5);
				leg2.render(f5);
				leg3.render(f5);
				leg4.render(f5);
				head.render(f5);
				tail.render(f5);
				GL11.glPopMatrix();
			}
		}
		else
		{
			if(this.isChild)
			{
				float f6 = 2.0F;
				GL11.glPushMatrix();
				GL11.glScalef(1.5F / f6, 1.5F / f6, 1.5F / f6);
				GL11.glTranslatef(0.0F, 13.0F * f5, 3.0F * f5);
				head.render(f5);
				GL11.glPopMatrix();
				GL11.glPushMatrix();
				GL11.glScalef(0.75F / f6, 0.75F / f6, 0.75F / f6);
				GL11.glTranslatef(0.0F, 40.0F * f5, 0.0F);
				body.render(f5);
				mane.render(f5);
				leg1.render(f5);
				leg2.render(f5);
				leg3.render(f5);
				leg4.render(f5);
				tail.render(f5);
				GL11.glPopMatrix();
			}
			else
			{
				float f6 = 2.0F;
				GL11.glPushMatrix();
				GL11.glScalef(1.5F / f6, 1.5F / f6, 1.5F / f6);
				GL11.glTranslatef(0.0F, 8.0F * f5, 0.0F);
				body.render(f5);
				mane.render(f5);
				leg1.render(f5);
				leg2.render(f5);
				leg3.render(f5);
				leg4.render(f5);
				head.render(f5);
				tail.render(f5);
				GL11.glPopMatrix();
			}
		}
	}

	private void setRotation(ModelRenderer model, float x, float y, float z)
	{
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
	{
		super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		this.head.rotateAngleX = f4 / (180F / (float) Math.PI);
		this.head.rotateAngleY = f3 / (180F / (float) Math.PI);
		this.tail.rotateAngleY = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
		this.leg1.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
		this.leg2.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 1.4F * f1;
		this.leg3.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 1.4F * f1;
		this.leg4.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
	}

}
